// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.Base1 = (function() {
    function Base1() {}

    Base1.classMethod = function() {
      return Base1.__super__.constructor.classMethod.call(this) + "Base1";
    };

    Base1.prototype.init = function() {
      return Base1.__super__.init.call(this) + "Base1";
    };

    return Base1;

  })();

  window.Base2 = (function() {
    function Base2() {}

    Base2.classMethod = function() {
      return "Base2";
    };

    Base2.prototype.init = function() {
      return "Base2";
    };

    return Base2;

  })();

  window.Deriv = (function(superClass) {
    extend(Deriv, superClass);

    function Deriv() {
      return Deriv.__super__.constructor.apply(this, arguments);
    }

    Deriv.classMethod = function() {
      return Deriv.__super__.constructor.classMethod.call(this) + "Deriv";
    };

    Deriv.prototype.init = function() {
      return Deriv.__super__.init.call(this) + "Deriv";
    };

    return Deriv;

  })(heterarchy.multi(Base1, Base2));

}).call(this);
