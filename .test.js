// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.Base1 = (function() {
    function Base1() {}

    Base1.classMethod = function() {
      return Base1.__super__.constructor.classMethod.call(this) + "Base1";
    };

    Base1.prototype.init = function() {
      return Base1.__super__.init.call(this) + "Base1";
    };

    return Base1;

  })();

  window.Base2 = (function() {
    function Base2() {}

    Base2.classMethod = function() {
      return "Base2";
    };

    Base2.prototype.init = function() {
      return "Base2";
    };

    return Base2;

  })();

  window.Deriv = (function(superClass) {
    extend(Deriv, superClass);

    function Deriv() {
      return Deriv.__super__.constructor.apply(this, arguments);
    }

    Deriv.classMethod = function() {
      return Deriv.__super__.constructor.classMethod.call(this) + "Deriv";
    };

    Deriv.prototype.init = function() {
      return Deriv.__super__.init.call(this) + "Deriv";
    };

    return Deriv;

  })(heterarchy.multi(Base1, Base2));

  window.A = (function() {
    function A() {
      this.a = 'a';
    }

    A.prototype.method = function() {
      return "A";
    };

    A.method = function() {
      return "A";
    };

    A.overrideNoSuper = function() {
      return "a";
    };

    return A;

  })();

  window.B = (function(superClass) {
    extend(B, superClass);

    function B() {
      B.__super__.constructor.apply(this, arguments);
      this.b = 'b';
    }

    B.prototype.method = function() {
      return "B>" + (B.__super__.method.apply(this, arguments));
    };

    B.method = function() {
      return "B>" + (B.__super__.constructor.method.apply(this, arguments));
    };

    B.overrideNoSuper = function() {
      return "b";
    };

    return B;

  })(A);

  window.C = (function(superClass) {
    extend(C, superClass);

    function C() {
      C.__super__.constructor.apply(this, arguments);
      this.c = 'c';
    }

    C.prototype.method = function() {
      return "C>" + (C.__super__.method.apply(this, arguments));
    };

    C.method = function() {
      return "C>" + (C.__super__.constructor.method.apply(this, arguments));
    };

    C.overrideNoSuper = function() {
      return "c";
    };

    return C;

  })(A);

  window.D = (function(superClass) {
    extend(D, superClass);

    function D() {
      D.__super__.constructor.apply(this, arguments);
      this.d = 'd';
    }

    D.prototype.method = function() {
      return "D>" + (D.__super__.method.apply(this, arguments));
    };

    D.method = function() {
      return "D>" + (D.__super__.constructor.method.apply(this, arguments));
    };

    D.overrideNoSuper = function() {
      return "d";
    };

    return D;

  })(heterarchy.multi(B, C));

  window.E = (function(superClass) {
    extend(E, superClass);

    function E() {
      E.__super__.constructor.apply(this, arguments);
      this.e = 'e';
    }

    E.prototype.method = function() {
      return "E>" + (E.__super__.method.apply(this, arguments));
    };

    E.method = function() {
      return "E>" + (E.__super__.constructor.method.apply(this, arguments));
    };

    E.overrideNoSuper = function() {
      return "e";
    };

    return E;

  })(A);

  window.F = (function(superClass) {
    extend(F, superClass);

    function F() {
      F.__super__.constructor.apply(this, arguments);
      this.f = 'f';
    }

    F.prototype.method = function() {
      return "F>" + (F.__super__.method.apply(this, arguments));
    };

    F.method = function() {
      return "F>" + (F.__super__.constructor.method.apply(this, arguments));
    };

    F.overrideNoSuper = function() {
      return "f";
    };

    return F;

  })(heterarchy.multi(C, E));

  window.G = (function(superClass) {
    extend(G, superClass);

    function G() {
      G.__super__.constructor.apply(this, arguments);
      this.g = 'g';
    }

    G.prototype.method = function() {
      return "G>" + (G.__super__.method.apply(this, arguments));
    };

    G.method = function() {
      return "G>" + (G.__super__.constructor.method.apply(this, arguments));
    };

    G.overrideNoSuper = function() {
      return "g";
    };

    return G;

  })(heterarchy.multi(D, F));

}).call(this);
